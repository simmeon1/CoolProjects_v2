using Nefarius.ViGEm.Client.Targets;
using System.Drawing;
using Vigem_ClassLibrary;
using Vigem_ClassLibrary.Commands;
using Vigem_ClassLibrary.SystemImplementations;
using Vigem_Common.Mappings;
using VigemControllers_ClassLibrary;
//using WindowsPixelReader;

namespace Vigem_Console
{
    internal class Program
    {
        static async Task Main(string[] args)
        {
            ControllerCreator creator = new();

            IDualShock4Controller createdDs4Controller = creator.GetDualShock4Controller();
            Dualshock4Controller cds4 = new(createdDs4Controller);
            Delayer delayer = new();
            ControllerUser userDs4 = new(cds4, delayer, 500);
            cds4.Connect();

            //PixelReader pr = new();


            //await delayer.Delay(1000);
            //await userDs4.PressButton(ButtonMappings.Options);

            //await delayer.Delay(1000);
            //await userDs4.PressDPad(DPadMappings.Left);

            //await delayer.Delay(1000);
            //await userDs4.PressDPad(DPadMappings.Right);

            //await delayer.Delay(1000);
            //await userDs4.PressButton(ButtonMappings.Cross);


            ChromeGamepadStateParser parser = new();

            string shortRun = "b9:1;t:27877.79999999702~b9:0;t:28046.19999999553~b15:1;t:28458.60000000149~b15:0;t:28725.69999999553~b15:1;t:29041.79999999702~b15:0;t:29157.79999999702~b0:1;t:29342~b0:0;t:29573.79999999702~";
            string paused_short = "b9:1;t:27877.79999999702~b9:0;t:28046.19999999553~b15:1;t:28458.60000000149~b15:0;t:28725.69999999553~b15:1;t:29041.79999999702~b15:0;t:29157.79999999702~b0:1;t:29342~b0:0;t:29573.79999999702~b15:1;t:29610.29999999702~b15:0;t:30458.5~b15:1;t:30809.69999999553~b15:0;t:30926.19999999553~b0:1;t:31277.69999999553~b0:0;t:31590~b15:1;t:31621.89999999851~b15:0;t:31993.89999999851~b15:1;t:32309.69999999553~b15:0;t:32442.19999999553~b0:1;t:32478~b0:0;t:32794.10000000149~b15:1;t:32825.69999999553~b15:0;t:33125.79999999702~b14:1;t:33437.89999999851~b14:0;t:33477.69999999553~b0:1;t:33609.89999999851~b14:1;t:33658.39999999851~b14:0;t:33889.79999999702~b0:0;t:33937.69999999553~b15:1;t:34846.19999999553~b15:0;t:34877.5~b0:1;t:35746.39999999851~b14:1;t:35925.60000000149~b0:0;t:36341.60000000149~b14:0;t:36642.5~b15:1;t:37061.79999999702~b15:0;t:37161.69999999553~b0:1;t:37494.89999999851~b0:0;t:37709.5~b15:1;t:38609.60000000149~b15:0;t:38994.29999999702~b9:1;t:39693.60000000149~b9:0;t:39822.19999999553~";
            string notPaused_short = "b15:1;t:28458.60000000149~b15:0;t:28725.69999999553~b15:1;t:29041.79999999702~b15:0;t:29157.79999999702~b0:1;t:29342~b0:0;t:29573.79999999702~b15:1;t:29610.29999999702~b15:0;t:30458.5~b15:1;t:30809.69999999553~b15:0;t:30926.19999999553~b0:1;t:31277.69999999553~b0:0;t:31590~b15:1;t:31621.89999999851~b15:0;t:31993.89999999851~b15:1;t:32309.69999999553~b15:0;t:32442.19999999553~b0:1;t:32478~b0:0;t:32794.10000000149~b15:1;t:32825.69999999553~b15:0;t:33125.79999999702~b14:1;t:33437.89999999851~b14:0;t:33477.69999999553~b0:1;t:33609.89999999851~b14:1;t:33658.39999999851~b14:0;t:33889.79999999702~b0:0;t:33937.69999999553~b15:1;t:34846.19999999553~b15:0;t:34877.5~b0:1;t:35746.39999999851~b14:1;t:35925.60000000149~b0:0;t:36341.60000000149~b14:0;t:36642.5~b15:1;t:37061.79999999702~b15:0;t:37161.69999999553~b0:1;t:37494.89999999851~b0:0;t:37709.5~b15:1;t:38609.60000000149~b15:0;t:38994.29999999702~b9:1;t:39693.60000000149~b9:0;t:39822.19999999553~";
            string dumbRun = "b9:1;t:71994.69999999925~b9:0;t:72107.29999999702~b15:1;t:72794.89999999851~b2:1;t:73578.59999999776~b15:0;t:75423.39999999851~b2:0;t:75462.69999999925~b15:1;t:75879.19999999925~b0:1;t:75910.59999999776~b0:0;t:76542.89999999851~b15:0;t:76847.09999999776~b15:1;t:77230.69999999925~b2:1;t:77275.29999999702~b15:0;t:78507.09999999776~b2:0;t:78542.79999999702~b15:1;t:78811.29999999702~b0:1;t:78826.59999999776~b0:0;t:79378.69999999925~b15:0;t:79411~b15:1;t:81259.19999999925~b0:1;t:81290.59999999776~b0:0;b15:0;t:81498.69999999925~b14:1;t:81691~b14:0;t:81810.89999999851~b15:1;t:82579.09999999776~b2:1;t:82639.09999999776~b15:0;t:83846.79999999702~b2:0;t:83858.89999999851~b15:1;t:84378.89999999851~b0:1;t:84394.5~b0:0;b15:0;t:84963.19999999925~b15:1;t:85627.39999999851~b2:1;t:85679.09999999776~b0:1;t:85878.59999999776~b0:0;t:86643.19999999925~b2:0;t:86662.69999999925~b2:1;t:87210.89999999851~b2:0;t:88142.59999999776~b0:1;t:88263.19999999925~b0:0;t:88806.79999999702~b15:0;t:88890.89999999851~b15:1;t:89162.59999999776~b15:0;t:89707.39999999851~b15:1;t:90162.89999999851~b2:1;t:90226.89999999851~b0:1;t:90778.89999999851~b0:0;t:91328~b2:0;t:91427.09999999776~b15:0;t:91443~b15:1;t:92422.89999999851~b2:1;t:92462.79999999702~b0:1;t:93295.5~b0:0;t:94091~b2:0;t:94210.79999999702~b15:0;t:94239~b15:1;t:94362.89999999851~b2:1;t:94379~b2:0;t:94442.79999999702~b0:1;t:94458.79999999702~b0:0;t:94822.79999999702~b15:0;t:94858.5~b0:1;t:95826.69999999925~b0:0;t:96011.19999999925~b15:1;t:96743.39999999851~b0:1;t:97762.5~b0:0;t:97862.89999999851~b15:0;t:98042.69999999925~b15:1;t:98523.09999999776~b15:0;t:98758.69999999925~b9:1;t:99594.39999999851~b9:0;t:99778.79999999702~";
            string fullRun = "b9:1;t:27877.79999999702~b9:0;t:28046.19999999553~b15:1;t:28458.60000000149~b15:0;t:28725.69999999553~b15:1;t:29041.79999999702~b15:0;t:29157.79999999702~b0:1;t:29342~b0:0;t:29573.79999999702~b15:1;t:29610.29999999702~b15:0;t:30458.5~b15:1;t:30809.69999999553~b15:0;t:30926.19999999553~b0:1;t:31277.69999999553~b0:0;t:31590~b15:1;t:31621.89999999851~b15:0;t:31993.89999999851~b15:1;t:32309.69999999553~b15:0;t:32442.19999999553~b0:1;t:32478~b0:0;t:32794.10000000149~b15:1;t:32825.69999999553~b15:0;t:33125.79999999702~b14:1;t:33437.89999999851~b14:0;t:33477.69999999553~b0:1;t:33609.89999999851~b14:1;t:33658.39999999851~b14:0;t:33889.79999999702~b0:0;t:33937.69999999553~b15:1;t:34846.19999999553~b15:0;t:34877.5~b0:1;t:35746.39999999851~b14:1;t:35925.60000000149~b0:0;t:36341.60000000149~b14:0;t:36642.5~b15:1;t:37061.79999999702~b15:0;t:37161.69999999553~b0:1;t:37494.89999999851~b0:0;t:37709.5~b15:1;t:38609.60000000149~b15:0;t:38994.29999999702~b9:1;t:39693.60000000149~b9:0;t:39822.19999999553~";

            var states = parser.GetStates(dumbRun);
            var timestamps = states.Keys.OrderBy(x => x);
            var newStates = new Dictionary<double, IEnumerable<IControllerCommand>>();
            foreach (KeyValuePair<double, IEnumerable<IControllerCommand>> state in states)
            {
                newStates.Add(state.Key - (timestamps.ElementAt(0) - 500), state.Value);
            }

            CommandExecutor executor = new(new RealStopwatch());
            await delayer.Delay(1000);

            //DELETE ME
            //await userDs4.PressButton(ButtonMappings.Options);

            //float? lastBrightness = null;
            //while (true)
            //{
            //    //await delayer.Delay(1000);
            //    //var pos = pr.GetCursorLocation();
            //    float brightness = pr.GetColorAtLocation(new Point(2725, 163)).GetBrightness();
            //    if (lastBrightness == null)
            //    {
            //        lastBrightness = brightness;
            //    }
            //    else if (lastBrightness != brightness)
            //    {
            //        break;
            //    }
            //    //Console.WriteLine($"{pos.X}, {pos.Y}");
            //}
            executor.ExecuteCommands(newStates, cds4);
        }
    }
}